/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var tachyon_pb = require('./tachyon_pb.js');
goog.exportSymbol('proto.NetworkMessage', null, global);
goog.exportSymbol('proto.NetworkMessage.StarBroadcast', null, global);
goog.exportSymbol('proto.NetworkMessage.StarConnection', null, global);
goog.exportSymbol('proto.NetworkMessage.StarConnectionAck', null, global);
goog.exportSymbol('proto.NetworkMessage.StarDisconnection', null, global);
goog.exportSymbol('proto.NetworkMessage.StarUnicast', null, global);
goog.exportSymbol('proto.PortalSubscriptionResponse', null, global);
goog.exportSymbol('proto.PortalUpdate', null, global);
goog.exportSymbol('proto.PortalUpdate.SiteAssignment', null, global);
goog.exportSymbol('proto.PortalUpdate.TextEditorSwitch', null, global);
goog.exportSymbol('proto.RouterMessage', null, global);
goog.exportSymbol('proto.RouterMessage.Notification', null, global);
goog.exportSymbol('proto.RouterMessage.Request', null, global);
goog.exportSymbol('proto.RouterMessage.Response', null, global);
goog.exportSymbol('proto.TextBuffer', null, global);
goog.exportSymbol('proto.TextBufferUpdate', null, global);
goog.exportSymbol('proto.TextEditor', null, global);
goog.exportSymbol('proto.TextEditorUpdate', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PortalSubscriptionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PortalSubscriptionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PortalSubscriptionResponse.displayName = 'proto.PortalSubscriptionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PortalSubscriptionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PortalSubscriptionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PortalSubscriptionResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PortalSubscriptionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    siteIdsByPeerIdMap: (f = msg.getSiteIdsByPeerIdMap()) ? f.toObject(includeInstance, undefined) : [],
    activeTextEditor: (f = msg.getActiveTextEditor()) && proto.TextEditor.toObject(includeInstance, f),
    activeTextBuffer: (f = msg.getActiveTextBuffer()) && proto.TextBuffer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PortalSubscriptionResponse}
 */
proto.PortalSubscriptionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PortalSubscriptionResponse;
  return proto.PortalSubscriptionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PortalSubscriptionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PortalSubscriptionResponse}
 */
proto.PortalSubscriptionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getSiteIdsByPeerIdMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32);
         });
      break;
    case 2:
      var value = new proto.TextEditor;
      reader.readMessage(value,proto.TextEditor.deserializeBinaryFromReader);
      msg.setActiveTextEditor(value);
      break;
    case 3:
      var value = new proto.TextBuffer;
      reader.readMessage(value,proto.TextBuffer.deserializeBinaryFromReader);
      msg.setActiveTextBuffer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PortalSubscriptionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PortalSubscriptionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PortalSubscriptionResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PortalSubscriptionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSiteIdsByPeerIdMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getActiveTextEditor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TextEditor.serializeBinaryToWriter
    );
  }
  f = message.getActiveTextBuffer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.TextBuffer.serializeBinaryToWriter
    );
  }
};


/**
 * map<string, uint32> site_ids_by_peer_id = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.PortalSubscriptionResponse.prototype.getSiteIdsByPeerIdMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.PortalSubscriptionResponse.prototype.clearSiteIdsByPeerIdMap = function() {
  this.getSiteIdsByPeerIdMap().clear();
};


/**
 * optional TextEditor active_text_editor = 2;
 * @return {?proto.TextEditor}
 */
proto.PortalSubscriptionResponse.prototype.getActiveTextEditor = function() {
  return /** @type{?proto.TextEditor} */ (
    jspb.Message.getWrapperField(this, proto.TextEditor, 2));
};


/** @param {?proto.TextEditor|undefined} value */
proto.PortalSubscriptionResponse.prototype.setActiveTextEditor = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.PortalSubscriptionResponse.prototype.clearActiveTextEditor = function() {
  this.setActiveTextEditor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PortalSubscriptionResponse.prototype.hasActiveTextEditor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TextBuffer active_text_buffer = 3;
 * @return {?proto.TextBuffer}
 */
proto.PortalSubscriptionResponse.prototype.getActiveTextBuffer = function() {
  return /** @type{?proto.TextBuffer} */ (
    jspb.Message.getWrapperField(this, proto.TextBuffer, 3));
};


/** @param {?proto.TextBuffer|undefined} value */
proto.PortalSubscriptionResponse.prototype.setActiveTextBuffer = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.PortalSubscriptionResponse.prototype.clearActiveTextBuffer = function() {
  this.setActiveTextBuffer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PortalSubscriptionResponse.prototype.hasActiveTextBuffer = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PortalUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.PortalUpdate.oneofGroups_);
};
goog.inherits(proto.PortalUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PortalUpdate.displayName = 'proto.PortalUpdate';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.PortalUpdate.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.PortalUpdate.VariantCase = {
  VARIANT_NOT_SET: 0,
  TEXT_EDITOR_SWITCH: 1,
  SITE_ASSIGNMENT: 2
};

/**
 * @return {proto.PortalUpdate.VariantCase}
 */
proto.PortalUpdate.prototype.getVariantCase = function() {
  return /** @type {proto.PortalUpdate.VariantCase} */(jspb.Message.computeOneofCase(this, proto.PortalUpdate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PortalUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.PortalUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PortalUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PortalUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    textEditorSwitch: (f = msg.getTextEditorSwitch()) && proto.PortalUpdate.TextEditorSwitch.toObject(includeInstance, f),
    siteAssignment: (f = msg.getSiteAssignment()) && proto.PortalUpdate.SiteAssignment.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PortalUpdate}
 */
proto.PortalUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PortalUpdate;
  return proto.PortalUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PortalUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PortalUpdate}
 */
proto.PortalUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PortalUpdate.TextEditorSwitch;
      reader.readMessage(value,proto.PortalUpdate.TextEditorSwitch.deserializeBinaryFromReader);
      msg.setTextEditorSwitch(value);
      break;
    case 2:
      var value = new proto.PortalUpdate.SiteAssignment;
      reader.readMessage(value,proto.PortalUpdate.SiteAssignment.deserializeBinaryFromReader);
      msg.setSiteAssignment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PortalUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PortalUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PortalUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PortalUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTextEditorSwitch();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PortalUpdate.TextEditorSwitch.serializeBinaryToWriter
    );
  }
  f = message.getSiteAssignment();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PortalUpdate.SiteAssignment.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PortalUpdate.TextEditorSwitch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PortalUpdate.TextEditorSwitch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PortalUpdate.TextEditorSwitch.displayName = 'proto.PortalUpdate.TextEditorSwitch';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PortalUpdate.TextEditorSwitch.prototype.toObject = function(opt_includeInstance) {
  return proto.PortalUpdate.TextEditorSwitch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PortalUpdate.TextEditorSwitch} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PortalUpdate.TextEditorSwitch.toObject = function(includeInstance, msg) {
  var f, obj = {
    textEditorId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    textBufferId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PortalUpdate.TextEditorSwitch}
 */
proto.PortalUpdate.TextEditorSwitch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PortalUpdate.TextEditorSwitch;
  return proto.PortalUpdate.TextEditorSwitch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PortalUpdate.TextEditorSwitch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PortalUpdate.TextEditorSwitch}
 */
proto.PortalUpdate.TextEditorSwitch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTextEditorId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTextBufferId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PortalUpdate.TextEditorSwitch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PortalUpdate.TextEditorSwitch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PortalUpdate.TextEditorSwitch} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PortalUpdate.TextEditorSwitch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTextEditorId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTextBufferId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 text_editor_id = 1;
 * @return {number}
 */
proto.PortalUpdate.TextEditorSwitch.prototype.getTextEditorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PortalUpdate.TextEditorSwitch.prototype.setTextEditorId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 text_buffer_id = 2;
 * @return {number}
 */
proto.PortalUpdate.TextEditorSwitch.prototype.getTextBufferId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PortalUpdate.TextEditorSwitch.prototype.setTextBufferId = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PortalUpdate.SiteAssignment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PortalUpdate.SiteAssignment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PortalUpdate.SiteAssignment.displayName = 'proto.PortalUpdate.SiteAssignment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PortalUpdate.SiteAssignment.prototype.toObject = function(opt_includeInstance) {
  return proto.PortalUpdate.SiteAssignment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PortalUpdate.SiteAssignment} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PortalUpdate.SiteAssignment.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    siteId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PortalUpdate.SiteAssignment}
 */
proto.PortalUpdate.SiteAssignment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PortalUpdate.SiteAssignment;
  return proto.PortalUpdate.SiteAssignment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PortalUpdate.SiteAssignment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PortalUpdate.SiteAssignment}
 */
proto.PortalUpdate.SiteAssignment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSiteId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PortalUpdate.SiteAssignment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PortalUpdate.SiteAssignment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PortalUpdate.SiteAssignment} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PortalUpdate.SiteAssignment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSiteId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string peer_id = 1;
 * @return {string}
 */
proto.PortalUpdate.SiteAssignment.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PortalUpdate.SiteAssignment.prototype.setPeerId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 site_id = 2;
 * @return {number}
 */
proto.PortalUpdate.SiteAssignment.prototype.getSiteId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PortalUpdate.SiteAssignment.prototype.setSiteId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional TextEditorSwitch text_editor_switch = 1;
 * @return {?proto.PortalUpdate.TextEditorSwitch}
 */
proto.PortalUpdate.prototype.getTextEditorSwitch = function() {
  return /** @type{?proto.PortalUpdate.TextEditorSwitch} */ (
    jspb.Message.getWrapperField(this, proto.PortalUpdate.TextEditorSwitch, 1));
};


/** @param {?proto.PortalUpdate.TextEditorSwitch|undefined} value */
proto.PortalUpdate.prototype.setTextEditorSwitch = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.PortalUpdate.oneofGroups_[0], value);
};


proto.PortalUpdate.prototype.clearTextEditorSwitch = function() {
  this.setTextEditorSwitch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PortalUpdate.prototype.hasTextEditorSwitch = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SiteAssignment site_assignment = 2;
 * @return {?proto.PortalUpdate.SiteAssignment}
 */
proto.PortalUpdate.prototype.getSiteAssignment = function() {
  return /** @type{?proto.PortalUpdate.SiteAssignment} */ (
    jspb.Message.getWrapperField(this, proto.PortalUpdate.SiteAssignment, 2));
};


/** @param {?proto.PortalUpdate.SiteAssignment|undefined} value */
proto.PortalUpdate.prototype.setSiteAssignment = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.PortalUpdate.oneofGroups_[0], value);
};


proto.PortalUpdate.prototype.clearSiteAssignment = function() {
  this.setSiteAssignment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PortalUpdate.prototype.hasSiteAssignment = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TextEditor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TextEditor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TextEditor.displayName = 'proto.TextEditor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TextEditor.prototype.toObject = function(opt_includeInstance) {
  return proto.TextEditor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TextEditor} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TextEditor.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    textBufferId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    selectionLayerIdsBySiteIdMap: (f = msg.getSelectionLayerIdsBySiteIdMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TextEditor}
 */
proto.TextEditor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TextEditor;
  return proto.TextEditor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TextEditor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TextEditor}
 */
proto.TextEditor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTextBufferId(value);
      break;
    case 3:
      var value = msg.getSelectionLayerIdsBySiteIdMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TextEditor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TextEditor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TextEditor} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TextEditor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTextBufferId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSelectionLayerIdsBySiteIdMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.TextEditor.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TextEditor.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 text_buffer_id = 2;
 * @return {number}
 */
proto.TextEditor.prototype.getTextBufferId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TextEditor.prototype.setTextBufferId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * map<uint32, uint32> selection_layer_ids_by_site_id = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.TextEditor.prototype.getSelectionLayerIdsBySiteIdMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


proto.TextEditor.prototype.clearSelectionLayerIdsBySiteIdMap = function() {
  this.getSelectionLayerIdsBySiteIdMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TextEditorUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TextEditorUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TextEditorUpdate.displayName = 'proto.TextEditorUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TextEditorUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.TextEditorUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TextEditorUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TextEditorUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectionLayerIdsBySiteIdMap: (f = msg.getSelectionLayerIdsBySiteIdMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TextEditorUpdate}
 */
proto.TextEditorUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TextEditorUpdate;
  return proto.TextEditorUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TextEditorUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TextEditorUpdate}
 */
proto.TextEditorUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getSelectionLayerIdsBySiteIdMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TextEditorUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TextEditorUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TextEditorUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TextEditorUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectionLayerIdsBySiteIdMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
};


/**
 * map<uint32, uint32> selection_layer_ids_by_site_id = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.TextEditorUpdate.prototype.getSelectionLayerIdsBySiteIdMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


proto.TextEditorUpdate.prototype.clearSelectionLayerIdsBySiteIdMap = function() {
  this.getSelectionLayerIdsBySiteIdMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TextBuffer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TextBuffer.repeatedFields_, null);
};
goog.inherits(proto.TextBuffer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TextBuffer.displayName = 'proto.TextBuffer';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TextBuffer.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TextBuffer.prototype.toObject = function(opt_includeInstance) {
  return proto.TextBuffer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TextBuffer} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TextBuffer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    uri: jspb.Message.getFieldWithDefault(msg, 2, ""),
    operationsList: jspb.Message.toObjectList(msg.getOperationsList(),
    tachyon_pb.Operation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TextBuffer}
 */
proto.TextBuffer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TextBuffer;
  return proto.TextBuffer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TextBuffer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TextBuffer}
 */
proto.TextBuffer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUri(value);
      break;
    case 3:
      var value = new tachyon_pb.Operation;
      reader.readMessage(value,tachyon_pb.Operation.deserializeBinaryFromReader);
      msg.addOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TextBuffer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TextBuffer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TextBuffer} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TextBuffer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUri();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      tachyon_pb.Operation.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.TextBuffer.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TextBuffer.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string uri = 2;
 * @return {string}
 */
proto.TextBuffer.prototype.getUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TextBuffer.prototype.setUri = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * repeated Operation operations = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Operation>}
 */
proto.TextBuffer.prototype.getOperationsList = function() {
  return /** @type{!Array.<!proto.Operation>} */ (
    jspb.Message.getRepeatedWrapperField(this, tachyon_pb.Operation, 3));
};


/** @param {!Array.<!proto.Operation>} value */
proto.TextBuffer.prototype.setOperationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Operation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Operation}
 */
proto.TextBuffer.prototype.addOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Operation, opt_index);
};


proto.TextBuffer.prototype.clearOperationsList = function() {
  this.setOperationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TextBufferUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TextBufferUpdate.repeatedFields_, null);
};
goog.inherits(proto.TextBufferUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TextBufferUpdate.displayName = 'proto.TextBufferUpdate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TextBufferUpdate.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TextBufferUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.TextBufferUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TextBufferUpdate} msg The msg instance to transform.
 * @return {!Object}
 */
proto.TextBufferUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    operationsList: jspb.Message.toObjectList(msg.getOperationsList(),
    tachyon_pb.Operation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TextBufferUpdate}
 */
proto.TextBufferUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TextBufferUpdate;
  return proto.TextBufferUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TextBufferUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TextBufferUpdate}
 */
proto.TextBufferUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new tachyon_pb.Operation;
      reader.readMessage(value,tachyon_pb.Operation.deserializeBinaryFromReader);
      msg.addOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TextBufferUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TextBufferUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TextBufferUpdate} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.TextBufferUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      tachyon_pb.Operation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Operation operations = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Operation>}
 */
proto.TextBufferUpdate.prototype.getOperationsList = function() {
  return /** @type{!Array.<!proto.Operation>} */ (
    jspb.Message.getRepeatedWrapperField(this, tachyon_pb.Operation, 1));
};


/** @param {!Array.<!proto.Operation>} value */
proto.TextBufferUpdate.prototype.setOperationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Operation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Operation}
 */
proto.TextBufferUpdate.prototype.addOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Operation, opt_index);
};


proto.TextBufferUpdate.prototype.clearOperationsList = function() {
  this.setOperationsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RouterMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.RouterMessage.oneofGroups_);
};
goog.inherits(proto.RouterMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RouterMessage.displayName = 'proto.RouterMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.RouterMessage.oneofGroups_ = [[2,3,4]];

/**
 * @enum {number}
 */
proto.RouterMessage.VariantCase = {
  VARIANT_NOT_SET: 0,
  NOTIFICATION: 2,
  REQUEST: 3,
  RESPONSE: 4
};

/**
 * @return {proto.RouterMessage.VariantCase}
 */
proto.RouterMessage.prototype.getVariantCase = function() {
  return /** @type {proto.RouterMessage.VariantCase} */(jspb.Message.computeOneofCase(this, proto.RouterMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RouterMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RouterMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RouterMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RouterMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    notification: (f = msg.getNotification()) && proto.RouterMessage.Notification.toObject(includeInstance, f),
    request: (f = msg.getRequest()) && proto.RouterMessage.Request.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.RouterMessage.Response.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RouterMessage}
 */
proto.RouterMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RouterMessage;
  return proto.RouterMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RouterMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RouterMessage}
 */
proto.RouterMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.RouterMessage.Notification;
      reader.readMessage(value,proto.RouterMessage.Notification.deserializeBinaryFromReader);
      msg.setNotification(value);
      break;
    case 3:
      var value = new proto.RouterMessage.Request;
      reader.readMessage(value,proto.RouterMessage.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 4:
      var value = new proto.RouterMessage.Response;
      reader.readMessage(value,proto.RouterMessage.Response.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RouterMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RouterMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RouterMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RouterMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNotification();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RouterMessage.Notification.serializeBinaryToWriter
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.RouterMessage.Request.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.RouterMessage.Response.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RouterMessage.Notification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RouterMessage.Notification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RouterMessage.Notification.displayName = 'proto.RouterMessage.Notification';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RouterMessage.Notification.prototype.toObject = function(opt_includeInstance) {
  return proto.RouterMessage.Notification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RouterMessage.Notification} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RouterMessage.Notification.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RouterMessage.Notification}
 */
proto.RouterMessage.Notification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RouterMessage.Notification;
  return proto.RouterMessage.Notification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RouterMessage.Notification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RouterMessage.Notification}
 */
proto.RouterMessage.Notification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RouterMessage.Notification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RouterMessage.Notification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RouterMessage.Notification} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RouterMessage.Notification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string channel_id = 1;
 * @return {string}
 */
proto.RouterMessage.Notification.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RouterMessage.Notification.prototype.setChannelId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {!(string|Uint8Array)}
 */
proto.RouterMessage.Notification.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.RouterMessage.Notification.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.RouterMessage.Notification.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.RouterMessage.Notification.prototype.setBody = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RouterMessage.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RouterMessage.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RouterMessage.Request.displayName = 'proto.RouterMessage.Request';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RouterMessage.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.RouterMessage.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RouterMessage.Request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RouterMessage.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RouterMessage.Request}
 */
proto.RouterMessage.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RouterMessage.Request;
  return proto.RouterMessage.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RouterMessage.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RouterMessage.Request}
 */
proto.RouterMessage.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RouterMessage.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RouterMessage.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RouterMessage.Request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RouterMessage.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string channel_id = 1;
 * @return {string}
 */
proto.RouterMessage.Request.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RouterMessage.Request.prototype.setChannelId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 request_id = 2;
 * @return {number}
 */
proto.RouterMessage.Request.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.RouterMessage.Request.prototype.setRequestId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes body = 3;
 * @return {!(string|Uint8Array)}
 */
proto.RouterMessage.Request.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes body = 3;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.RouterMessage.Request.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.RouterMessage.Request.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.RouterMessage.Request.prototype.setBody = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RouterMessage.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RouterMessage.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RouterMessage.Response.displayName = 'proto.RouterMessage.Response';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RouterMessage.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.RouterMessage.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RouterMessage.Response} msg The msg instance to transform.
 * @return {!Object}
 */
proto.RouterMessage.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RouterMessage.Response}
 */
proto.RouterMessage.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RouterMessage.Response;
  return proto.RouterMessage.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RouterMessage.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RouterMessage.Response}
 */
proto.RouterMessage.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RouterMessage.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RouterMessage.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RouterMessage.Response} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.RouterMessage.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 request_id = 1;
 * @return {number}
 */
proto.RouterMessage.Response.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.RouterMessage.Response.prototype.setRequestId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {!(string|Uint8Array)}
 */
proto.RouterMessage.Response.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.RouterMessage.Response.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.RouterMessage.Response.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.RouterMessage.Response.prototype.setBody = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Notification notification = 2;
 * @return {?proto.RouterMessage.Notification}
 */
proto.RouterMessage.prototype.getNotification = function() {
  return /** @type{?proto.RouterMessage.Notification} */ (
    jspb.Message.getWrapperField(this, proto.RouterMessage.Notification, 2));
};


/** @param {?proto.RouterMessage.Notification|undefined} value */
proto.RouterMessage.prototype.setNotification = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.RouterMessage.oneofGroups_[0], value);
};


proto.RouterMessage.prototype.clearNotification = function() {
  this.setNotification(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RouterMessage.prototype.hasNotification = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Request request = 3;
 * @return {?proto.RouterMessage.Request}
 */
proto.RouterMessage.prototype.getRequest = function() {
  return /** @type{?proto.RouterMessage.Request} */ (
    jspb.Message.getWrapperField(this, proto.RouterMessage.Request, 3));
};


/** @param {?proto.RouterMessage.Request|undefined} value */
proto.RouterMessage.prototype.setRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.RouterMessage.oneofGroups_[0], value);
};


proto.RouterMessage.prototype.clearRequest = function() {
  this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RouterMessage.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Response response = 4;
 * @return {?proto.RouterMessage.Response}
 */
proto.RouterMessage.prototype.getResponse = function() {
  return /** @type{?proto.RouterMessage.Response} */ (
    jspb.Message.getWrapperField(this, proto.RouterMessage.Response, 4));
};


/** @param {?proto.RouterMessage.Response|undefined} value */
proto.RouterMessage.prototype.setResponse = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.RouterMessage.oneofGroups_[0], value);
};


proto.RouterMessage.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.RouterMessage.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.NetworkMessage.oneofGroups_);
};
goog.inherits(proto.NetworkMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkMessage.displayName = 'proto.NetworkMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.NetworkMessage.oneofGroups_ = [[2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.NetworkMessage.VariantCase = {
  VARIANT_NOT_SET: 0,
  STAR_CONNECTION: 2,
  STAR_CONNECTION_ACK: 3,
  STAR_DISCONNECTION: 4,
  STAR_UNICAST: 5,
  STAR_BROADCAST: 6
};

/**
 * @return {proto.NetworkMessage.VariantCase}
 */
proto.NetworkMessage.prototype.getVariantCase = function() {
  return /** @type {proto.NetworkMessage.VariantCase} */(jspb.Message.computeOneofCase(this, proto.NetworkMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NetworkMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    networkId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    starConnection: (f = msg.getStarConnection()) && proto.NetworkMessage.StarConnection.toObject(includeInstance, f),
    starConnectionAck: (f = msg.getStarConnectionAck()) && proto.NetworkMessage.StarConnectionAck.toObject(includeInstance, f),
    starDisconnection: (f = msg.getStarDisconnection()) && proto.NetworkMessage.StarDisconnection.toObject(includeInstance, f),
    starUnicast: (f = msg.getStarUnicast()) && proto.NetworkMessage.StarUnicast.toObject(includeInstance, f),
    starBroadcast: (f = msg.getStarBroadcast()) && proto.NetworkMessage.StarBroadcast.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkMessage}
 */
proto.NetworkMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkMessage;
  return proto.NetworkMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkMessage}
 */
proto.NetworkMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkId(value);
      break;
    case 2:
      var value = new proto.NetworkMessage.StarConnection;
      reader.readMessage(value,proto.NetworkMessage.StarConnection.deserializeBinaryFromReader);
      msg.setStarConnection(value);
      break;
    case 3:
      var value = new proto.NetworkMessage.StarConnectionAck;
      reader.readMessage(value,proto.NetworkMessage.StarConnectionAck.deserializeBinaryFromReader);
      msg.setStarConnectionAck(value);
      break;
    case 4:
      var value = new proto.NetworkMessage.StarDisconnection;
      reader.readMessage(value,proto.NetworkMessage.StarDisconnection.deserializeBinaryFromReader);
      msg.setStarDisconnection(value);
      break;
    case 5:
      var value = new proto.NetworkMessage.StarUnicast;
      reader.readMessage(value,proto.NetworkMessage.StarUnicast.deserializeBinaryFromReader);
      msg.setStarUnicast(value);
      break;
    case 6:
      var value = new proto.NetworkMessage.StarBroadcast;
      reader.readMessage(value,proto.NetworkMessage.StarBroadcast.deserializeBinaryFromReader);
      msg.setStarBroadcast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NetworkMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetworkId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStarConnection();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NetworkMessage.StarConnection.serializeBinaryToWriter
    );
  }
  f = message.getStarConnectionAck();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.NetworkMessage.StarConnectionAck.serializeBinaryToWriter
    );
  }
  f = message.getStarDisconnection();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.NetworkMessage.StarDisconnection.serializeBinaryToWriter
    );
  }
  f = message.getStarUnicast();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.NetworkMessage.StarUnicast.serializeBinaryToWriter
    );
  }
  f = message.getStarBroadcast();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.NetworkMessage.StarBroadcast.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkMessage.StarConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkMessage.StarConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkMessage.StarConnection.displayName = 'proto.NetworkMessage.StarConnection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkMessage.StarConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkMessage.StarConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkMessage.StarConnection} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NetworkMessage.StarConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkMessage.StarConnection}
 */
proto.NetworkMessage.StarConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkMessage.StarConnection;
  return proto.NetworkMessage.StarConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkMessage.StarConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkMessage.StarConnection}
 */
proto.NetworkMessage.StarConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkMessage.StarConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkMessage.StarConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkMessage.StarConnection} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NetworkMessage.StarConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string sender_id = 1;
 * @return {string}
 */
proto.NetworkMessage.StarConnection.prototype.getSenderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NetworkMessage.StarConnection.prototype.setSenderId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkMessage.StarConnectionAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NetworkMessage.StarConnectionAck.repeatedFields_, null);
};
goog.inherits(proto.NetworkMessage.StarConnectionAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkMessage.StarConnectionAck.displayName = 'proto.NetworkMessage.StarConnectionAck';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NetworkMessage.StarConnectionAck.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkMessage.StarConnectionAck.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkMessage.StarConnectionAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkMessage.StarConnectionAck} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NetworkMessage.StarConnectionAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberIdsList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkMessage.StarConnectionAck}
 */
proto.NetworkMessage.StarConnectionAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkMessage.StarConnectionAck;
  return proto.NetworkMessage.StarConnectionAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkMessage.StarConnectionAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkMessage.StarConnectionAck}
 */
proto.NetworkMessage.StarConnectionAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addMemberIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkMessage.StarConnectionAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkMessage.StarConnectionAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkMessage.StarConnectionAck} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NetworkMessage.StarConnectionAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string member_ids = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
proto.NetworkMessage.StarConnectionAck.prototype.getMemberIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {!Array.<string>} value */
proto.NetworkMessage.StarConnectionAck.prototype.setMemberIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.NetworkMessage.StarConnectionAck.prototype.addMemberIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.NetworkMessage.StarConnectionAck.prototype.clearMemberIdsList = function() {
  this.setMemberIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkMessage.StarDisconnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkMessage.StarDisconnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkMessage.StarDisconnection.displayName = 'proto.NetworkMessage.StarDisconnection';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkMessage.StarDisconnection.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkMessage.StarDisconnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkMessage.StarDisconnection} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NetworkMessage.StarDisconnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionLost: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkMessage.StarDisconnection}
 */
proto.NetworkMessage.StarDisconnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkMessage.StarDisconnection;
  return proto.NetworkMessage.StarDisconnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkMessage.StarDisconnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkMessage.StarDisconnection}
 */
proto.NetworkMessage.StarDisconnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnectionLost(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkMessage.StarDisconnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkMessage.StarDisconnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkMessage.StarDisconnection} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NetworkMessage.StarDisconnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionLost();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string sender_id = 1;
 * @return {string}
 */
proto.NetworkMessage.StarDisconnection.prototype.getSenderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NetworkMessage.StarDisconnection.prototype.setSenderId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool connection_lost = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.NetworkMessage.StarDisconnection.prototype.getConnectionLost = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.NetworkMessage.StarDisconnection.prototype.setConnectionLost = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkMessage.StarUnicast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkMessage.StarUnicast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkMessage.StarUnicast.displayName = 'proto.NetworkMessage.StarUnicast';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkMessage.StarUnicast.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkMessage.StarUnicast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkMessage.StarUnicast} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NetworkMessage.StarUnicast.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recipientId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkMessage.StarUnicast}
 */
proto.NetworkMessage.StarUnicast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkMessage.StarUnicast;
  return proto.NetworkMessage.StarUnicast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkMessage.StarUnicast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkMessage.StarUnicast}
 */
proto.NetworkMessage.StarUnicast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientId(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkMessage.StarUnicast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkMessage.StarUnicast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkMessage.StarUnicast} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NetworkMessage.StarUnicast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecipientId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string sender_id = 1;
 * @return {string}
 */
proto.NetworkMessage.StarUnicast.prototype.getSenderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NetworkMessage.StarUnicast.prototype.setSenderId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string recipient_id = 2;
 * @return {string}
 */
proto.NetworkMessage.StarUnicast.prototype.getRecipientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NetworkMessage.StarUnicast.prototype.setRecipientId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes body = 3;
 * @return {!(string|Uint8Array)}
 */
proto.NetworkMessage.StarUnicast.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes body = 3;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.NetworkMessage.StarUnicast.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.NetworkMessage.StarUnicast.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.NetworkMessage.StarUnicast.prototype.setBody = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkMessage.StarBroadcast = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkMessage.StarBroadcast, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NetworkMessage.StarBroadcast.displayName = 'proto.NetworkMessage.StarBroadcast';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkMessage.StarBroadcast.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkMessage.StarBroadcast.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkMessage.StarBroadcast} msg The msg instance to transform.
 * @return {!Object}
 */
proto.NetworkMessage.StarBroadcast.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkMessage.StarBroadcast}
 */
proto.NetworkMessage.StarBroadcast.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkMessage.StarBroadcast;
  return proto.NetworkMessage.StarBroadcast.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkMessage.StarBroadcast} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkMessage.StarBroadcast}
 */
proto.NetworkMessage.StarBroadcast.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkMessage.StarBroadcast.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkMessage.StarBroadcast.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkMessage.StarBroadcast} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.NetworkMessage.StarBroadcast.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSenderId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string sender_id = 1;
 * @return {string}
 */
proto.NetworkMessage.StarBroadcast.prototype.getSenderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NetworkMessage.StarBroadcast.prototype.setSenderId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {!(string|Uint8Array)}
 */
proto.NetworkMessage.StarBroadcast.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.NetworkMessage.StarBroadcast.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.NetworkMessage.StarBroadcast.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.NetworkMessage.StarBroadcast.prototype.setBody = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string network_id = 1;
 * @return {string}
 */
proto.NetworkMessage.prototype.getNetworkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NetworkMessage.prototype.setNetworkId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional StarConnection star_connection = 2;
 * @return {?proto.NetworkMessage.StarConnection}
 */
proto.NetworkMessage.prototype.getStarConnection = function() {
  return /** @type{?proto.NetworkMessage.StarConnection} */ (
    jspb.Message.getWrapperField(this, proto.NetworkMessage.StarConnection, 2));
};


/** @param {?proto.NetworkMessage.StarConnection|undefined} value */
proto.NetworkMessage.prototype.setStarConnection = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.NetworkMessage.oneofGroups_[0], value);
};


proto.NetworkMessage.prototype.clearStarConnection = function() {
  this.setStarConnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NetworkMessage.prototype.hasStarConnection = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StarConnectionAck star_connection_ack = 3;
 * @return {?proto.NetworkMessage.StarConnectionAck}
 */
proto.NetworkMessage.prototype.getStarConnectionAck = function() {
  return /** @type{?proto.NetworkMessage.StarConnectionAck} */ (
    jspb.Message.getWrapperField(this, proto.NetworkMessage.StarConnectionAck, 3));
};


/** @param {?proto.NetworkMessage.StarConnectionAck|undefined} value */
proto.NetworkMessage.prototype.setStarConnectionAck = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.NetworkMessage.oneofGroups_[0], value);
};


proto.NetworkMessage.prototype.clearStarConnectionAck = function() {
  this.setStarConnectionAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NetworkMessage.prototype.hasStarConnectionAck = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional StarDisconnection star_disconnection = 4;
 * @return {?proto.NetworkMessage.StarDisconnection}
 */
proto.NetworkMessage.prototype.getStarDisconnection = function() {
  return /** @type{?proto.NetworkMessage.StarDisconnection} */ (
    jspb.Message.getWrapperField(this, proto.NetworkMessage.StarDisconnection, 4));
};


/** @param {?proto.NetworkMessage.StarDisconnection|undefined} value */
proto.NetworkMessage.prototype.setStarDisconnection = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.NetworkMessage.oneofGroups_[0], value);
};


proto.NetworkMessage.prototype.clearStarDisconnection = function() {
  this.setStarDisconnection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NetworkMessage.prototype.hasStarDisconnection = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional StarUnicast star_unicast = 5;
 * @return {?proto.NetworkMessage.StarUnicast}
 */
proto.NetworkMessage.prototype.getStarUnicast = function() {
  return /** @type{?proto.NetworkMessage.StarUnicast} */ (
    jspb.Message.getWrapperField(this, proto.NetworkMessage.StarUnicast, 5));
};


/** @param {?proto.NetworkMessage.StarUnicast|undefined} value */
proto.NetworkMessage.prototype.setStarUnicast = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.NetworkMessage.oneofGroups_[0], value);
};


proto.NetworkMessage.prototype.clearStarUnicast = function() {
  this.setStarUnicast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NetworkMessage.prototype.hasStarUnicast = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional StarBroadcast star_broadcast = 6;
 * @return {?proto.NetworkMessage.StarBroadcast}
 */
proto.NetworkMessage.prototype.getStarBroadcast = function() {
  return /** @type{?proto.NetworkMessage.StarBroadcast} */ (
    jspb.Message.getWrapperField(this, proto.NetworkMessage.StarBroadcast, 6));
};


/** @param {?proto.NetworkMessage.StarBroadcast|undefined} value */
proto.NetworkMessage.prototype.setStarBroadcast = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.NetworkMessage.oneofGroups_[0], value);
};


proto.NetworkMessage.prototype.clearStarBroadcast = function() {
  this.setStarBroadcast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NetworkMessage.prototype.hasStarBroadcast = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto);
